generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id Int @id @default(autoincrement())
  username String
  email String @unique
  password String
  avatar String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  kintais Kintai[]
  userTemplates UserTemplate[]
  commuterPasses CommuterPass[]
}

model Kintai {
  id Int @id @default(autoincrement())
  yearMonth String
  userId Int
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  Kintais KintaiDetail[]

  @@unique([yearMonth, userId])
}

model KintaiDetail {
  id Int @id @default(autoincrement())
  day Int
  startTime DateTime
  endTime DateTime
  breakTime Int @default(1)
  workType String
  remarks String?
  kintaiId Int
  kintai Kintai @relation(fields: [kintaiId], references: [id], onDelete: Cascade)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Template {
  id Int @id @default(autoincrement())
  type String @unique
  name String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  userTemplates UserTemplate[]
}

model UserTemplate {
  id Int @id @default(autoincrement())
  userId Int
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  templateId Int
  tempalte Template @relation(fields: [templateId], references: [id], onDelete: Cascade)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@unique([userId, templateId])
}

model CommuterPass {
  id Int @id @default(autoincrement())
  type String
  startDay Int
  start String
  end String
  price Int
  orderNumber Int
  userId Int
  User User @relation(fields: [userId], references: [id], onDelete: Cascade)
}